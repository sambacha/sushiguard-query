{"version":3,"file":"index.cjs.mjs","sources":["../src/base/TransactionError.ts","../src/base/TransactionStatus.ts","../src/utils/isOverridesObject.ts","../src/utils/mathCallQuery/index.ts"],"sourcesContent":["import { ContractTransaction } from 'ethers';\nimport { ContractReceipt } from '@ethersproject/contracts';\nimport { Logger } from '@ethersproject/logger';\n\n// union type of TransactionError's that we can grow.\nexport type TransactionError = TransactionReplacedError | TransactionFailedError;\n\nexport interface TransactionReplacedError extends Error {\n  code: 'TRANSACTION_REPLACED';\n  // The reason why the transaction was replaced\n  // - \"repriced\" is generally nothing of concern, the\n  //   only difference in the transaction is the gasPrice\n  // - \"cancelled\" means the `to` has been set to the `from`,\n  //   the data has been set to `0x` and value set to 0\n  // - \"replaced\" means that the transaction is unrelated to\n  //   the original transaction\n  reason: 'repriced' | 'cancelled' | 'replaced';\n  // This is a short-hand property as the effects of either a\n  // \"cancelled\" or \"replaced\" tx are effectively cancelled\n  cancelled: boolean;\n  // The TransactionResponse which replaced the original\n  replacement: ContractTransaction;\n  // The TransactionReceipt of the replacement transaction\n  receipt: ContractReceipt;\n}\n\nexport function isTransactionReplacedError(\n  error: TransactionError,\n): error is TransactionReplacedError {\n  if (error.code === Logger.errors.TRANSACTION_REPLACED) {\n    return true;\n  }\n  return false;\n}\n\nexport interface TransactionFailedError {\n  code: number;\n  message: string;\n  stack: string;\n}\n\n// TODO: Fix this ErrorType\nexport function isTransactionFailedError(error: TransactionError): error is TransactionError {\n  // 'Server error: Invalid input, unable to locate canonical block',\n  if (error?.message?.includes('-32000')) {\n    return true;\n  }\n\n  return false;\n}\n","/**\n * TODO\n */\n\nexport enum TransactionStatus {\n  SUBMITTED = 'SUBMITTED',\n  REPRICED = 'REPRICED',\n  CANCELLED = 'CANCELLED',\n  MINED = 'MINED',\n  UNCHECKED = 'UNCHECKED',\n  PROCESSING = 'PROCESSING',\n  OK = 'OK',\n  INDETERMINATE = 'INDETERMINATE',\n  ERROR = 'ERROR',\n  INVALID_PARAMS = 'INVALID_PARAMS',\n  INVALID_REQUEST = 'INVALID_REQUEST'\n}\n","import { Overrides } from '@ethersproject/contracts';\nimport isPlainObject from 'lodash.isplainobject';\n\nexport function isOverridesObject(obj: any): obj is Overrides {\n  if (isPlainObject(obj)) {\n    const overrides = obj as Overrides;\n    if (\n      'gasPrice' in overrides ||\n      'gasLimit' in overrides ||\n      'value' in overrides ||\n      'nonce' in overrides\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Query } from 'react-query';\nimport isEqual from 'lodash.isequal';\nimport { ContractMethodName } from 'src/types';\nimport { makeReadCallQueryKey } from 'src/hooks/useRead';\n\n/**\n * @export matchReadCallQuery\n * @summary Utility for matching smart contract read call queries when busting the cache.\n */\nexport function matchReadCallQuery<\n  TContract extends Contract,\n  TMethodName extends ContractMethodName<TContract>,\n>(\n  //  estimate: any,\n  // addressPromise: any,\n  _events: any,\n  _getEventFilter: any,\n  //   addListener: any,\n  query: Query,\n  contractAddress: string | undefined,\n  methodName: any | TMethodName,\n  callArgs: Parameters<TContract['functions'][TMethodName]> | undefined,\n): boolean {\n  // @note Don't Inline\n  const match = isEqual(\n    query.queryKey,\n    makeReadCallQueryKey(contractAddress, methodName, callArgs),\n  );\n  return match;\n}\n"],"names":[],"mappings":";;;;;AACO,SAAS,0BAA0B,CAAC,KAAK,EAAE;AAClD,EAAE,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE;AACzD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,OAAO,KAAK,CAAC;AACf,CAAC;AACM,SAAS,wBAAwB,CAAC,KAAK,EAAE;AAChD,EAAE,IAAI,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAC1C,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,OAAO,KAAK,CAAC;AACf;;ACZU,IAAC,iBAAiB,mBAAmB,CAAC,CAAC,kBAAkB,KAAK;AACxE,EAAE,kBAAkB,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;AAChD,EAAE,kBAAkB,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;AAC9C,EAAE,kBAAkB,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;AAChD,EAAE,kBAAkB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;AACxC,EAAE,kBAAkB,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC;AAChD,EAAE,kBAAkB,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;AAClD,EAAE,kBAAkB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AAClC,EAAE,kBAAkB,CAAC,eAAe,CAAC,GAAG,eAAe,CAAC;AACxD,EAAE,kBAAkB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;AACxC,EAAE,kBAAkB,CAAC,gBAAgB,CAAC,GAAG,gBAAgB,CAAC;AAC1D,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,GAAG,iBAAiB,CAAC;AAC5D,EAAE,OAAO,kBAAkB,CAAC;AAC5B,CAAC,EAAE,iBAAiB,IAAI,EAAE;;ACZnB,SAAS,iBAAiB,CAAC,GAAG,EAAE;AACvC,EAAE,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;AAC1B,IAAI,MAAM,SAAS,GAAG,GAAG,CAAC;AAC1B,IAAI,IAAI,UAAU,IAAI,SAAS,IAAI,UAAU,IAAI,SAAS,IAAI,OAAO,IAAI,SAAS,IAAI,OAAO,IAAI,SAAS,EAAE;AAC5G,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL,GAAG;AACH,EAAE,OAAO,KAAK,CAAC;AACf;;ACPO,SAAS,kBAAkB,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE;AAC3G,EAAE,MAAM,KAAK,GAAG,OAAO;AACvB,IAAI,KAAK,CAAC,QAAQ;AAClB,IAAI,oBAAoB,CAAC,eAAe,EAAE,UAAU,EAAE,QAAQ,CAAC;AAC/D,GAAG,CAAC;AACJ,EAAE,OAAO,KAAK,CAAC;AACf;;;;"}